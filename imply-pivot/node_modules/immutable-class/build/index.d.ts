export interface Instance<ValueType, JSType> {
    valueOf(): ValueType;
    toJS(): JSType;
    toJSON(): JSType;
    equals(other: Instance<ValueType, JSType>): boolean;
}
export interface Class<ValueType, JSType> {
    fromJS(properties: JSType): Instance<ValueType, JSType>;
    new (properties: ValueType): any;
}
export declare function isInstanceOf(thing: any, constructor: any): boolean;
export declare function isArrayOf(things: any[], constructor: any): boolean;
export declare function isImmutableClass(thing: any): boolean;
export interface Equalable {
    equals(other: any): boolean;
}
export declare function generalEqual<T>(a: T, b: T): boolean;
export declare function immutableEqual<T extends Equalable>(a: T, b: T): boolean;
export declare function immutableArraysEqual<T extends Equalable>(arrayA: T[], arrayB: T[]): boolean;
export declare function immutableLookupsEqual<T extends Equalable>(lookupA: {
    [k: string]: T;
}, lookupB: {
    [k: string]: T;
}): boolean;
